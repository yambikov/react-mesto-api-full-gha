{"ast":null,"code":"// export default \nclass Api {\n  constructor(options, cardId) {\n    this.baseUrl = options.baseUrl;\n    this.headers = options.headers;\n    this.data = options;\n    this.cardId = cardId;\n  }\n\n  // Вспомогательный метод для выполнения fetch-запросов и обработки ответа от сервера\n  _makeRequest(url, method, data) {\n    const requestOptions = {\n      method,\n      headers: this.headers,\n      ...(data ? {\n        body: JSON.stringify(data)\n      } : {})\n    };\n    return fetch(`${this.baseUrl}${url}`, requestOptions).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n  // Получить список начальных карточек\n  getInitialCards() {\n    return this._makeRequest('cards', 'GET'); // возвращает массив карточек\n  }\n\n  // Получить информацию о текущем пользователе\n  getUserInfoApi() {\n    return this._makeRequest('users/me', 'GET'); // возвращает объект с именем, должностью и проч.\n  }\n\n  // Изменить информацию о текущем пользователе\n  patchUserInfo(data) {\n    return this._makeRequest('users/me', 'PATCH', data);\n  }\n  postCard(data) {\n    return this._makeRequest('cards', 'POST', data);\n  }\n  deleteCard(cardId) {\n    return this._makeRequest(`cards/${cardId}`, 'DELETE');\n  }\n  putLike(cardId) {\n    return this._makeRequest(`cards/${cardId}/likes`, 'PUT');\n  }\n  deleteLike(cardId) {\n    return this._makeRequest(`cards/${cardId}/likes`, 'DELETE');\n  }\n  patchAvatar(data) {\n    return this._makeRequest(`users/me/avatar`, 'PATCH', data);\n  }\n}\nconst apiConfig = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-72/',\n  headers: {\n    authorization: 'baec5030-e66a-4791-88f5-1a246d578a5b',\n    'Content-Type': 'application/json'\n  }\n});\nexport default apiConfig;","map":{"version":3,"names":["Api","constructor","options","cardId","baseUrl","headers","data","_makeRequest","url","method","requestOptions","body","JSON","stringify","fetch","then","res","ok","json","Promise","reject","status","getInitialCards","getUserInfoApi","patchUserInfo","postCard","deleteCard","putLike","deleteLike","patchAvatar","apiConfig","authorization"],"sources":["/Users/yambikov/Desktop/dev/react-mesto-auth/src/utils/Api.js"],"sourcesContent":["\n// export default \nclass Api {\n  constructor(options, cardId) {\n    this.baseUrl = options.baseUrl;\n    this.headers = options.headers;\n    this.data = options;\n    this.cardId = cardId;\n  }\n\n  // Вспомогательный метод для выполнения fetch-запросов и обработки ответа от сервера\n  _makeRequest(url, method, data) {\n    const requestOptions = {\n      method,\n      headers: this.headers,\n      ...(data ? { body: JSON.stringify(data) } : {})\n    };\n\n    return fetch(`${this.baseUrl}${url}`, requestOptions)\n      .then((res) => {\n        if (res.ok) {\n          return res.json();\n        }\n        return Promise.reject(`Ошибка: ${res.status}`);\n      });\n  }\n\n  // Получить список начальных карточек\n  getInitialCards() {\n    return this._makeRequest('cards', 'GET'); // возвращает массив карточек\n  }\n\n  // Получить информацию о текущем пользователе\n  getUserInfoApi() {\n    return this._makeRequest('users/me', 'GET'); // возвращает объект с именем, должностью и проч.\n  }\n\n  // Изменить информацию о текущем пользователе\n  patchUserInfo(data) {\n    return this._makeRequest('users/me', 'PATCH', data);\n  }\n\n  postCard(data) {\n    return this._makeRequest('cards', 'POST', data);\n  }\n\n  deleteCard(cardId) {\n    return this._makeRequest(`cards/${cardId}`, 'DELETE');\n  }\n\n  putLike(cardId) {\n    return this._makeRequest(`cards/${cardId}/likes`, 'PUT');\n  }\n\n  deleteLike(cardId) {\n    return this._makeRequest(`cards/${cardId}/likes`, 'DELETE');\n  }\n\n  patchAvatar(data) {\n    return this._makeRequest(`users/me/avatar`, 'PATCH', data);\n  }\n\n}\n\nconst apiConfig = new Api(\n  {\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-72/',\n    headers: {\n      authorization: 'baec5030-e66a-4791-88f5-1a246d578a5b',\n      'Content-Type': 'application/json'\n    }}\n)\n\nexport default apiConfig;\n\n\n"],"mappings":"AACA;AACA,MAAMA,GAAG,CAAC;EACRC,WAAWA,CAACC,OAAO,EAAEC,MAAM,EAAE;IAC3B,IAAI,CAACC,OAAO,GAAGF,OAAO,CAACE,OAAO;IAC9B,IAAI,CAACC,OAAO,GAAGH,OAAO,CAACG,OAAO;IAC9B,IAAI,CAACC,IAAI,GAAGJ,OAAO;IACnB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACtB;;EAEA;EACAI,YAAYA,CAACC,GAAG,EAAEC,MAAM,EAAEH,IAAI,EAAE;IAC9B,MAAMI,cAAc,GAAG;MACrBD,MAAM;MACNJ,OAAO,EAAE,IAAI,CAACA,OAAO;MACrB,IAAIC,IAAI,GAAG;QAAEK,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,IAAI;MAAE,CAAC,GAAG,CAAC,CAAC;IAChD,CAAC;IAED,OAAOQ,KAAK,CAAE,GAAE,IAAI,CAACV,OAAQ,GAAEI,GAAI,EAAC,EAAEE,cAAc,CAAC,CAClDK,IAAI,CAAEC,GAAG,IAAK;MACb,IAAIA,GAAG,CAACC,EAAE,EAAE;QACV,OAAOD,GAAG,CAACE,IAAI,CAAC,CAAC;MACnB;MACA,OAAOC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAAC;IAChD,CAAC,CAAC;EACN;;EAEA;EACAC,eAAeA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACf,YAAY,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;EAC5C;;EAEA;EACAgB,cAAcA,CAAA,EAAG;IACf,OAAO,IAAI,CAAChB,YAAY,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC;EAC/C;;EAEA;EACAiB,aAAaA,CAAClB,IAAI,EAAE;IAClB,OAAO,IAAI,CAACC,YAAY,CAAC,UAAU,EAAE,OAAO,EAAED,IAAI,CAAC;EACrD;EAEAmB,QAAQA,CAACnB,IAAI,EAAE;IACb,OAAO,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE,MAAM,EAAED,IAAI,CAAC;EACjD;EAEAoB,UAAUA,CAACvB,MAAM,EAAE;IACjB,OAAO,IAAI,CAACI,YAAY,CAAE,SAAQJ,MAAO,EAAC,EAAE,QAAQ,CAAC;EACvD;EAEAwB,OAAOA,CAACxB,MAAM,EAAE;IACd,OAAO,IAAI,CAACI,YAAY,CAAE,SAAQJ,MAAO,QAAO,EAAE,KAAK,CAAC;EAC1D;EAEAyB,UAAUA,CAACzB,MAAM,EAAE;IACjB,OAAO,IAAI,CAACI,YAAY,CAAE,SAAQJ,MAAO,QAAO,EAAE,QAAQ,CAAC;EAC7D;EAEA0B,WAAWA,CAACvB,IAAI,EAAE;IAChB,OAAO,IAAI,CAACC,YAAY,CAAE,iBAAgB,EAAE,OAAO,EAAED,IAAI,CAAC;EAC5D;AAEF;AAEA,MAAMwB,SAAS,GAAG,IAAI9B,GAAG,CACvB;EACEI,OAAO,EAAE,8CAA8C;EACvDC,OAAO,EAAE;IACP0B,aAAa,EAAE,sCAAsC;IACrD,cAAc,EAAE;EAClB;AAAC,CACL,CAAC;AAED,eAAeD,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}